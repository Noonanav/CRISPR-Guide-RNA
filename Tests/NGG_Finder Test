import numpy as np
from Bio import SeqIO

Target_Seq_Filename = "/Users/siddarthraghuvanshi/Documents/Code/CRISPR_Guide_RNA/Fasta_Files/GFP.fasta"
Genome_Filename = "/Users/siddarthraghuvanshi/Documents/Code/CRISPR_Guide_RNA/Fasta_Files/Tiplasmidsequence.fasta"
count = 0
Target = SeqIO.read(Target_Seq_Filename, "fasta")
Genome = SeqIO.read(Genome_Filename, "fasta")
Guide_RNAs = []
Guide_RNA_length = 20

Target_Seq = Target.seq.upper()
Genome_Seq = Genome.seq.upper()

def PAM_Finder(Sequence, PAM, Direction):
  Guide_RNAs = []
  Location = []
  Strand = []

  Position = 0
  Temp_Sequence = Sequence
  j = 0 #Variable for limiting time spent searching Genome
  while True:
    i = Temp_Sequence.find(PAM)
    if(i == -1):
        break
    if(j > 10000):
        break
    Position = Position + i + 2
    if(Position > Guide_RNA_length):
        if(Direction > 0):
            Location.append(Position - 2)
            Strand.append(Direction)
            Guide_RNAs.append(Sequence[Position-23:Position-3])
        if(Direction < 0):
            Location.append(Position + 1)
            Strand.append(Direction)
            Guide_RNAs.append(Sequence[Position+1:Position+21])
    Temp_Sequence = Temp_Sequence[i+2:]
    j = j+1

  return Guide_RNAs,Location,Strand

#Combine the Coding and Template Strands into a single strand
def CombinetoStr (Template_Guides, Coding_Guides):
  Guides = []

  for i in range (len(Template_Guides)):
    if (i < len(Template_Guides)):
      Guides.append(str(Template_Guides[i]))

  for i in range (len(Coding_Guides)):
    if (i < len(Coding_Guides)):
      Guides.append(ReverseComplement(str(Coding_Guides[i])))

  return Guides

def ReverseComplement(nucleotide_sequence):
  comp = []
  for c in nucleotide_sequence:
    if c == 'A' or c == 'a':
      comp.append('T')
    if c == 'G' or c == 'g':
      comp.append('C')
    if c == 'U' or c == 'u' or c == 'T' or c == 't':
      comp.append('A')
    if c == 'C' or c == 'c':
      comp.append('G')
  rev_comp = ''.join(reversed(comp))
  return rev_comp

T_Guides_Pos, Position_Pos, Direction_Pos = PAM_Finder(Target_Seq, "GG",1)
T_Guides_Neg, Position_Neg, Direction_Neg = PAM_Finder(Target_Seq, "CC", -1)

Position_List = Position_Pos + Position_Neg
Direction_List = Direction_Pos + Direction_Neg
Guide_Info = np.vstack((Position_List, Direction_List)).T

Target_Guides = CombinetoStr(T_Guides_Pos, T_Guides_Neg)

for i in range (len(Target_Guides)):
  print(Target_Guides[i])
  print(Guide_Info[i][0])
  print(Guide_Info[i][1])
